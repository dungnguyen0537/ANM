Java

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Random;
import java.util.Base64;
import javax.swing.*;
import java.io.*;
import javax.swing.filechooser.FileNameExtensionFilter;

public class Elgamal {

    // ... (Các biến EsoP, EsoQ, E_So_G_A, EsoA, EsoX, EsoD, EsoK, SoC1, SoC2, pathSaveInfor, isResetting, danhDau)

    // ... (Các hàm E_kiemTraPTSinh, nguyenToCungNhau, E_LuyThuaModulo_, RabinMillerTest, 
    //      RandomBigInteger, E_kiemTraNguyenTo, E_kiemTraUocCuaSoP, GenerateRandomBigInteger, 
    //      RandomBigInteger_P, GenerateValidQ, GenerateValidG, GenerateValidX, GenerateValidK)

    // ... (Hàm TaoKhoa_click)

    // Lưu bản mã
    private void btFile_Click() {
        try {
            // Kiểm tra xem có nội dung cần lưu không
            if (txt_maHoaBanRo.getText().trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Lỗi bản mã", "Thông Báo", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Tạo JFileChooser để người dùng chọn định dạng và vị trí lưu file
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Lưu File");
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file (*.txt)", "txt");
            fileChooser.setFileFilter(filter);

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                // Lấy đường dẫn file được chọn
                File fileToSave = fileChooser.getSelectedFile();
                String path = fileToSave.getAbsolutePath();

                // Lưu nội dung dưới dạng file txt
                saveAsTextFile(path, txt_maHoaBanRo.getText());

                JOptionPane.showMessageDialog(this, "Lưu file thành công ở " + path, "Thông Báo", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            System.out.println("Quá trình thất bại: " + ex.toString());
        }
    }

    private void saveAsTextFile(String path, String content) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(path))) {
            writer.write(content);
        }
    }

    // ... (Hàm SaveInfor)

    // Mở file cho bản rõ
    private void btOpen_Click() {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Mở File");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text file (*.txt)", "txt");
        fileChooser.setFileFilter(filter);

        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    content.append(line).append("\n");
                }
                txtBanRo.setText(content.toString());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Lỗi đọc file: " + ex.getMessage(), "Thông Báo", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // ... (Các hàm btMoFile_Click, btChuyen_Click, text_changedC2, text_changedC1, bt_taoKhoa_Click)

    // Mã hóa
    public String E_MaHoa(String ChuoiVao) {
        // Chuyển xâu thành mã Unicode
        byte[] mhE_temp1 = ChuoiVao.getBytes(); 
        String base64 = Base64.getEncoder().encodeToString(mhE_temp1);

        // Chuyển xâu thành mã Unicode dạng số
        BigInteger[] mh_temp2 = new BigInteger[base64.length()];
        for (int i = 0; i < base64.length(); i++) {
            mh_temp2[i] = BigInteger.valueOf(base64.charAt(i));
        }

        // Mảng a chứa các kí tự sẽ mã hóa
        BigInteger[] C1 = new BigInteger[mh_temp2.length];
        BigInteger[] C2 = new BigInteger[mh_temp2.length];

        // Thực hiện mã hóa: z = (d^k * m) mod p
        String so_c1 = E_LuyThuaModulo_(EsoA, EsoK, EsoP).toString();
        StringBuilder so_c2 = new StringBuilder(); 
        for (int i = 0; i < mh_temp2.length; i++) {
            C1[i] = E_LuyThuaModulo_(EsoA, EsoK, EsoP);
            C2[i] = mh_temp2[i].mod(EsoP).multiply(E_LuyThuaModulo_(EsoD, EsoK, EsoP)).mod(EsoP);
            so_c2.append(C2[i]).append("\n"); 
        }

        // Hiển thị số C1 và số C2
        txt_So_C1.setText(so_c1.trim());
        txt_So_C2.setText(so_c2.toString().trim());

        // Lưu C1 và C2
        SoC1 = so_c1.trim();
        SoC2 = so_c2.toString().trim();

        // Chuyển sang kiểu kí tự trong bảng mã Unicode
        StringBuilder str = new StringBuilder();
        for (int i = 0; i < C2.length; i++) {
            str.append(C1[i]).append(",").append(C2[i]).append(";");
        }

        // Mã hóa chuỗi kết quả thành Base64
        byte[] E_data1 = str.toString().getBytes();
        String BanMaHoa = Base64.getEncoder().encodeToString(E_data1); 
        return BanMaHoa;
    }

    // Giải mã
    public String E_GiaiMa(String ChuoiMaHoa) {
        // Bước 1: Giải mã chuỗi Base64 thành chuỗi Unicode
        byte[] E_data1 = Base64.getDecoder().decode(ChuoiMaHoa); 
        String Egm_giaima = new String(E_data1); 

        // Tách C1 và C2 từ chuỗi
        String[] pairs = Egm_giaima.split(";");
        BigInteger[] C1 = new BigInteger[pairs.length - 1];
        BigInteger[] C2 = new BigInteger[pairs.length - 1];
        for (int i = 0; i < pairs.length - 1; i++) {
            String[] pair = pairs[i].split(",");
            C1[i] = new BigInteger(pair[0]);
            C2[i] = new BigInteger(pair[1]);
        }

        BigInteger[] M = new BigInteger[C1.length];
        for (int i = 0; i < C1.length; i++) {
            BigInteger s = E_LuyThuaModulo_(C1[i], EsoP.subtract(BigInteger.ONE).subtract(EsoX), EsoP);
            M[i] = C2[i].multiply(s).mod(EsoP);
        }

        // Chuyển đổi từ mảng số sang chuỗi
        StringBuilder str = new StringBuilder();
        for (BigInteger bigInteger : M) {
            str.append((char) bigInteger.intValue());
        }

        // Chuyển chuỗi Unicode thành chuỗi gốc
        byte[] data2 = Base64.getDecoder().decode(str.toString()); 
        String BanGiaiMa = new String(data2); 
        return BanGiaiMa;
    }

    // ... (Các hàm btMaHoa_Click, btGiaiMa_Click, btThoat_Click, btTaoBanRoMoi_Click)

}
Lưu ý khi chuyển đổi:

Giao diện người dùng: Code C# sử dụng WPF cho giao diện ( System.Windows ). Bạn cần thay thế bằng các thành phần tương ứng trong Java Swing ( javax.swing ) hoặc JavaFX.
Thư viện: Một số thư viện trong C# cần được thay thế bằng thư viện Java tương đương:
Xceed.Words.NET -> Apache POI hoặc docx4j để xử lý file DOCX.
iTextSharp -> iText 7 để xử lý file PDF.
Xử lý file: Thay thế OpenFileDialog và SaveFileDialog bằng JFileChooser trong Java Swing.
Mã hóa Base64: Sử dụng lớp java.util.Base64 trong Java để mã hóa và giải mã Base64.
Kiểu dữ liệu: BigInteger được sử dụng trong cả C# và Java.
Các hàm: Cần kiểm tra và điều chỉnh một số hàm để tương thích với cú pháp và thư viện Java. Ví dụ: MessageBox.Show trong C# được thay bằng JOptionPane.showMessageDialog trong Java Swing.
Để hoàn thiện đoạn code Java, bạn cần:

Thay thế các thành phần giao diện người dùng WPF bằng Java Swing hoặc JavaFX.
Thêm các thư viện Java cần thiết (Apache POI, docx4j, iText 7).
Hoàn thiện các hàm xử lý sự kiện cho các nút bấm và các thành phần giao diện khác.
